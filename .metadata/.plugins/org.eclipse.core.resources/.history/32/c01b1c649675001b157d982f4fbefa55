package com.phonebook.controller;

import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.phonebook.eniity.ContactEntity;
import com.phonebook.service.ContactService;

import io.swagger.annotations.Api;

@RestController
@RequestMapping("/api/contact")
@Api
public class ContactRestController {

	private ContactService service;

	public ContactRestController(ContactService service) {
		this.service = service;
	}

	@PostMapping
	public ResponseEntity<String> saveContact(@RequestBody ContactEntity contact) {
		boolean saveCotact = service.saveContact(contact);

		if (saveCotact) {
			return new ResponseEntity<>("Saved Contact", HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>("Failed Contact", HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	@GetMapping
	public ResponseEntity<List<ContactEntity>> getAllContact() {

		List<ContactEntity> contact = service.getAllContacts();

		return new ResponseEntity<>(contact, HttpStatus.OK);

	}

	@GetMapping(value = "{contactId}")
	public ResponseEntity<ContactEntity> getContactById(@PathVariable Integer contactId) {

		ContactEntity contact = service.getContactById(contactId);

		return new ResponseEntity<>(contact, HttpStatus.OK);
	}

	@DeleteMapping(value = "{contactId}")
	public ResponseEntity<String> deletebyId(@PathVariable Integer contactId) {

		boolean isDelete = service.deleteContactById(contactId);

		if (isDelete) {
			return new ResponseEntity<>("Conatct deleted", HttpStatus.OK);
		} else {
			return new ResponseEntity<>("Failed", HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@PutMapping("{contactId}")
	public ResponseEntity<String> updateConatct(@RequestBody ContactEntity contact, @PathVariable Integer contactId) {
		/*
		 * if (contact.getContactId() != null) { boolean saveConact =
		 * service.saveContact(contact);
		 * 
		 * if (saveConact) { return new ResponseEntity<>("Contact Updated",
		 * HttpStatus.OK); } else {
		 * 
		 * return new ResponseEntity<>("Update Failed",
		 * HttpStatus.INTERNAL_SERVER_ERROR); }
		 * 
		 * } else {
		 * 
		 * throw new NoContactDetailFoundException("Conatct information not found"); }
		 */

		/*
		 * ContactEntity existContact = service.getContactById(contactId); if
		 * (existContact != null) {
		 * 
		 * boolean updateCon = service.saveContact(contact); if (updateCon) { return new
		 * ResponseEntity<>("Updated", HttpStatus.OK); } else { return new
		 * ResponseEntity<>("Failed", HttpStatus.INTERNAL_SERVER_ERROR); } } else {
		 * 
		 * throw new NoContactDetailFoundException("No contact Found"); }
		 */
		
		 try {
		        ContactEntity existCon = service.getContactById(contactId);
		        service.saveContact(contact);
		        return new ResponseEntity<>(HttpStatus.OK);
		    } catch (NoSuchElementException e) {
		        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		    }      

	}

}
